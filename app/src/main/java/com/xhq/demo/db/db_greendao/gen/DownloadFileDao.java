package com.xhq.demo.db.db_greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.xhq.demo.db.db_greendao.entry.DownloadFile;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DOWNLOAD_FILE".
*/
public class DownloadFileDao extends AbstractDao<DownloadFile, String> {

    public static final String TABLENAME = "DOWNLOAD_FILE";

    /**
     * Properties of entity DownloadFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Path = new Property(1, String.class, "path", false, "PATH");
        public final static Property UserId = new Property(2, String.class, "UserId", false, "USER_ID");
    }


    public DownloadFileDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_FILE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"PATH\" TEXT," + // 1: path
                "\"USER_ID\" TEXT);"); // 2: UserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_FILE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadFile entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(3, UserId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadFile entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(3, UserId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DownloadFile readEntity(Cursor cursor, int offset) {
        DownloadFile entity = new DownloadFile( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // path
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // UserId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadFile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DownloadFile entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(DownloadFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadFile entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
