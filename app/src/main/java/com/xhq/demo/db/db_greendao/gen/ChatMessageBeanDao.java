package com.xhq.demo.db.db_greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.xhq.demo.db.db_greendao.entry.ChatMessageBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CHAT_MESSAGE_BEAN".
*/
public class ChatMessageBeanDao extends AbstractDao<ChatMessageBean, String> {

    public static final String TABLENAME = "CHAT_MESSAGE_BEAN";

    /**
     * Properties of entity ChatMessageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Mid = new Property(0, String.class, "mid", true, "MID");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property Gid = new Property(2, String.class, "gid", false, "GID");
        public final static Property Msg = new Property(3, String.class, "msg", false, "MSG");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property UserVoiceTime = new Property(6, int.class, "UserVoiceTime", false, "USER_VOICE_TIME");
        public final static Property UserVoicePath = new Property(7, String.class, "UserVoicePath", false, "USER_VOICE_PATH");
        public final static Property UserVoiceUrl = new Property(8, String.class, "UserVoiceUrl", false, "USER_VOICE_URL");
        public final static Property SendState = new Property(9, int.class, "sendState", false, "SEND_STATE");
        public final static Property ImageUrl = new Property(10, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property ImageLocal = new Property(11, String.class, "imageLocal", false, "IMAGE_LOCAL");
        public final static Property FileUrl = new Property(12, String.class, "fileUrl", false, "FILE_URL");
        public final static Property FileSize = new Property(13, long.class, "fileSize", false, "FILE_SIZE");
        public final static Property FileName = new Property(14, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileStatus = new Property(15, String.class, "fileStatus", false, "FILE_STATUS");
        public final static Property UserId = new Property(16, String.class, "UserId", false, "USER_ID");
    }


    public ChatMessageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE_BEAN\" (" + //
                "\"MID\" TEXT PRIMARY KEY NOT NULL ," + // 0: mid
                "\"UID\" TEXT," + // 1: uid
                "\"GID\" TEXT," + // 2: gid
                "\"MSG\" TEXT," + // 3: msg
                "\"TIME\" TEXT," + // 4: time
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"USER_VOICE_TIME\" INTEGER NOT NULL ," + // 6: UserVoiceTime
                "\"USER_VOICE_PATH\" TEXT," + // 7: UserVoicePath
                "\"USER_VOICE_URL\" TEXT," + // 8: UserVoiceUrl
                "\"SEND_STATE\" INTEGER NOT NULL ," + // 9: sendState
                "\"IMAGE_URL\" TEXT," + // 10: imageUrl
                "\"IMAGE_LOCAL\" TEXT," + // 11: imageLocal
                "\"FILE_URL\" TEXT," + // 12: fileUrl
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 13: fileSize
                "\"FILE_NAME\" TEXT," + // 14: fileName
                "\"FILE_STATUS\" TEXT," + // 15: fileStatus
                "\"USER_ID\" TEXT);"); // 16: UserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessageBean entity) {
        stmt.clearBindings();
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(1, mid);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String gid = entity.getGid();
        if (gid != null) {
            stmt.bindString(3, gid);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(4, msg);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getUserVoiceTime());
 
        String UserVoicePath = entity.getUserVoicePath();
        if (UserVoicePath != null) {
            stmt.bindString(8, UserVoicePath);
        }
 
        String UserVoiceUrl = entity.getUserVoiceUrl();
        if (UserVoiceUrl != null) {
            stmt.bindString(9, UserVoiceUrl);
        }
        stmt.bindLong(10, entity.getSendState());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(11, imageUrl);
        }
 
        String imageLocal = entity.getImageLocal();
        if (imageLocal != null) {
            stmt.bindString(12, imageLocal);
        }
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(13, fileUrl);
        }
        stmt.bindLong(14, entity.getFileSize());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(15, fileName);
        }
 
        String fileStatus = entity.getFileStatus();
        if (fileStatus != null) {
            stmt.bindString(16, fileStatus);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(17, UserId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessageBean entity) {
        stmt.clearBindings();
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(1, mid);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String gid = entity.getGid();
        if (gid != null) {
            stmt.bindString(3, gid);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(4, msg);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getUserVoiceTime());
 
        String UserVoicePath = entity.getUserVoicePath();
        if (UserVoicePath != null) {
            stmt.bindString(8, UserVoicePath);
        }
 
        String UserVoiceUrl = entity.getUserVoiceUrl();
        if (UserVoiceUrl != null) {
            stmt.bindString(9, UserVoiceUrl);
        }
        stmt.bindLong(10, entity.getSendState());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(11, imageUrl);
        }
 
        String imageLocal = entity.getImageLocal();
        if (imageLocal != null) {
            stmt.bindString(12, imageLocal);
        }
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(13, fileUrl);
        }
        stmt.bindLong(14, entity.getFileSize());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(15, fileName);
        }
 
        String fileStatus = entity.getFileStatus();
        if (fileStatus != null) {
            stmt.bindString(16, fileStatus);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(17, UserId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ChatMessageBean readEntity(Cursor cursor, int offset) {
        ChatMessageBean entity = new ChatMessageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // mid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msg
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.getInt(offset + 5), // type
            cursor.getInt(offset + 6), // UserVoiceTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // UserVoicePath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // UserVoiceUrl
            cursor.getInt(offset + 9), // sendState
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // imageUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // imageLocal
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // fileUrl
            cursor.getLong(offset + 13), // fileSize
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fileName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // fileStatus
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // UserId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessageBean entity, int offset) {
        entity.setMid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMsg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setUserVoiceTime(cursor.getInt(offset + 6));
        entity.setUserVoicePath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserVoiceUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSendState(cursor.getInt(offset + 9));
        entity.setImageUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setImageLocal(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFileUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFileSize(cursor.getLong(offset + 13));
        entity.setFileName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFileStatus(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChatMessageBean entity, long rowId) {
        return entity.getMid();
    }
    
    @Override
    public String getKey(ChatMessageBean entity) {
        if(entity != null) {
            return entity.getMid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessageBean entity) {
        return entity.getMid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
