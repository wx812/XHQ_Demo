package com.xhq.demo.db.db_greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.xhq.demo.db.db_greendao.entry.RecentContact;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "RECENT_CONTACT".
*/
public class RecentContactDao extends AbstractDao<RecentContact, String> {

    public static final String TABLENAME = "RECENT_CONTACT";

    /**
     * Properties of entity RecentContact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Mid = new Property(0, String.class, "mid", true, "MID");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property Gid = new Property(2, String.class, "gid", false, "GID");
        public final static Property Hid = new Property(3, String.class, "hid", false, "HID");
        public final static Property St = new Property(4, String.class, "st", false, "ST");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Count = new Property(6, int.class, "count", false, "COUNT");
        public final static Property Type = new Property(7, int.class, "type", false, "TYPE");
        public final static Property Msg = new Property(8, String.class, "msg", false, "MSG");
        public final static Property UserId = new Property(9, String.class, "UserId", false, "USER_ID");
        public final static Property Len = new Property(10, int.class, "len", false, "LEN");
        public final static Property Ids = new Property(11, String.class, "ids", false, "IDS");
        public final static Property Fn = new Property(12, String.class, "fn", false, "FN");
        public final static Property GeneralField = new Property(13, String.class, "generalField", false, "GENERAL_FIELD");
    }


    public RecentContactDao(DaoConfig config) {
        super(config);
    }
    
    public RecentContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECENT_CONTACT\" (" + //
                "\"MID\" TEXT PRIMARY KEY NOT NULL ," + // 0: mid
                "\"UID\" TEXT," + // 1: uid
                "\"GID\" TEXT," + // 2: gid
                "\"HID\" TEXT," + // 3: hid
                "\"ST\" TEXT," + // 4: st
                "\"NAME\" TEXT," + // 5: name
                "\"COUNT\" INTEGER NOT NULL ," + // 6: count
                "\"TYPE\" INTEGER NOT NULL ," + // 7: type
                "\"MSG\" TEXT," + // 8: msg
                "\"USER_ID\" TEXT," + // 9: UserId
                "\"LEN\" INTEGER NOT NULL ," + // 10: len
                "\"IDS\" TEXT," + // 11: ids
                "\"FN\" TEXT," + // 12: fn
                "\"GENERAL_FIELD\" TEXT);"); // 13: generalField
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECENT_CONTACT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecentContact entity) {
        stmt.clearBindings();
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(1, mid);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String gid = entity.getGid();
        if (gid != null) {
            stmt.bindString(3, gid);
        }
 
        String hid = entity.getHid();
        if (hid != null) {
            stmt.bindString(4, hid);
        }
 
        String st = entity.getSt();
        if (st != null) {
            stmt.bindString(5, st);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
        stmt.bindLong(7, entity.getCount());
        stmt.bindLong(8, entity.getType());
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(9, msg);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(10, UserId);
        }
        stmt.bindLong(11, entity.getLen());
 
        String ids = entity.getIds();
        if (ids != null) {
            stmt.bindString(12, ids);
        }
 
        String fn = entity.getFn();
        if (fn != null) {
            stmt.bindString(13, fn);
        }
 
        String generalField = entity.getGeneralField();
        if (generalField != null) {
            stmt.bindString(14, generalField);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecentContact entity) {
        stmt.clearBindings();
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(1, mid);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String gid = entity.getGid();
        if (gid != null) {
            stmt.bindString(3, gid);
        }
 
        String hid = entity.getHid();
        if (hid != null) {
            stmt.bindString(4, hid);
        }
 
        String st = entity.getSt();
        if (st != null) {
            stmt.bindString(5, st);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
        stmt.bindLong(7, entity.getCount());
        stmt.bindLong(8, entity.getType());
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(9, msg);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(10, UserId);
        }
        stmt.bindLong(11, entity.getLen());
 
        String ids = entity.getIds();
        if (ids != null) {
            stmt.bindString(12, ids);
        }
 
        String fn = entity.getFn();
        if (fn != null) {
            stmt.bindString(13, fn);
        }
 
        String generalField = entity.getGeneralField();
        if (generalField != null) {
            stmt.bindString(14, generalField);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public RecentContact readEntity(Cursor cursor, int offset) {
        RecentContact entity = new RecentContact( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // mid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // st
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.getInt(offset + 6), // count
            cursor.getInt(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // msg
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // UserId
            cursor.getInt(offset + 10), // len
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ids
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // fn
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // generalField
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecentContact entity, int offset) {
        entity.setMid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCount(cursor.getInt(offset + 6));
        entity.setType(cursor.getInt(offset + 7));
        entity.setMsg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLen(cursor.getInt(offset + 10));
        entity.setIds(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFn(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGeneralField(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final String updateKeyAfterInsert(RecentContact entity, long rowId) {
        return entity.getMid();
    }
    
    @Override
    public String getKey(RecentContact entity) {
        if(entity != null) {
            return entity.getMid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecentContact entity) {
        return entity.getMid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
