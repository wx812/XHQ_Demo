package com.xhq.demo.db.db_greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.xhq.demo.db.db_greendao.entry.Activate;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "ACTIVATE".
*/
public class ActivateDao extends AbstractDao<Activate, String> {

    public static final String TABLENAME = "ACTIVATE";

    /**
     * Properties of entity Activate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", true, "USER_ID");
        public final static Property Cone = new Property(1, String.class, "cone", false, "CONE");
        public final static Property Ctwo = new Property(2, String.class, "ctwo", false, "CTWO");
        public final static Property Cthr = new Property(3, String.class, "cthr", false, "CTHR");
        public final static Property Cfour = new Property(4, String.class, "cfour", false, "CFOUR");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Tel = new Property(6, String.class, "tel", false, "TEL");
        public final static Property Uid = new Property(7, String.class, "uid", false, "UID");
        public final static Property Statu = new Property(8, String.class, "statu", false, "STATU");
    }


    public ActivateDao(DaoConfig config) {
        super(config);
    }
    
    public ActivateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACTIVATE\" (" + //
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: userId
                "\"CONE\" TEXT," + // 1: cone
                "\"CTWO\" TEXT," + // 2: ctwo
                "\"CTHR\" TEXT," + // 3: cthr
                "\"CFOUR\" TEXT," + // 4: cfour
                "\"NAME\" TEXT," + // 5: name
                "\"TEL\" TEXT," + // 6: tel
                "\"UID\" TEXT," + // 7: uid
                "\"STATU\" TEXT);"); // 8: statu
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACTIVATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Activate entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String cone = entity.getCone();
        if (cone != null) {
            stmt.bindString(2, cone);
        }
 
        String ctwo = entity.getCtwo();
        if (ctwo != null) {
            stmt.bindString(3, ctwo);
        }
 
        String cthr = entity.getCthr();
        if (cthr != null) {
            stmt.bindString(4, cthr);
        }
 
        String cfour = entity.getCfour();
        if (cfour != null) {
            stmt.bindString(5, cfour);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(7, tel);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(8, uid);
        }
 
        String statu = entity.getStatu();
        if (statu != null) {
            stmt.bindString(9, statu);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Activate entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String cone = entity.getCone();
        if (cone != null) {
            stmt.bindString(2, cone);
        }
 
        String ctwo = entity.getCtwo();
        if (ctwo != null) {
            stmt.bindString(3, ctwo);
        }
 
        String cthr = entity.getCthr();
        if (cthr != null) {
            stmt.bindString(4, cthr);
        }
 
        String cfour = entity.getCfour();
        if (cfour != null) {
            stmt.bindString(5, cfour);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(7, tel);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(8, uid);
        }
 
        String statu = entity.getStatu();
        if (statu != null) {
            stmt.bindString(9, statu);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Activate readEntity(Cursor cursor, int offset) {
        Activate entity = new Activate( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ctwo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cthr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cfour
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // uid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // statu
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Activate entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCtwo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCthr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCfour(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatu(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Activate entity, long rowId) {
        return entity.getUserId();
    }
    
    @Override
    public String getKey(Activate entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Activate entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
