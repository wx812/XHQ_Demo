package com.xhq.common.dao.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.xhq.common.bean.ImageInfoBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_INFO_BEAN".
*/
public class ImageInfoBeanDao extends AbstractDao<ImageInfoBean, String> {

    public static final String TABLENAME = "IMAGE_INFO_BEAN";

    /**
     * Properties of entity ImageInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AttachId = new Property(0, String.class, "attachId", true, "ATTACH_ID");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property FilePath = new Property(3, String.class, "FilePath", false, "FILE_PATH");
    }


    public ImageInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ImageInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_INFO_BEAN\" (" + //
                "\"ATTACH_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: attachId
                "\"UID\" TEXT NOT NULL ," + // 1: uid
                "\"TYPE\" TEXT NOT NULL ," + // 2: type
                "\"FILE_PATH\" TEXT NOT NULL );"); // 3: FilePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImageInfoBean entity) {
        stmt.clearBindings();
 
        String attachId = entity.getAttachId();
        if (attachId != null) {
            stmt.bindString(1, attachId);
        }
        stmt.bindString(2, entity.getUid());
        stmt.bindString(3, entity.getType());
        stmt.bindString(4, entity.getFilePath());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImageInfoBean entity) {
        stmt.clearBindings();
 
        String attachId = entity.getAttachId();
        if (attachId != null) {
            stmt.bindString(1, attachId);
        }
        stmt.bindString(2, entity.getUid());
        stmt.bindString(3, entity.getType());
        stmt.bindString(4, entity.getFilePath());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ImageInfoBean readEntity(Cursor cursor, int offset) {
        ImageInfoBean entity = new ImageInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // attachId
            cursor.getString(offset + 1), // uid
            cursor.getString(offset + 2), // type
            cursor.getString(offset + 3) // FilePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImageInfoBean entity, int offset) {
        entity.setAttachId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUid(cursor.getString(offset + 1));
        entity.setType(cursor.getString(offset + 2));
        entity.setFilePath(cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ImageInfoBean entity, long rowId) {
        return entity.getAttachId();
    }
    
    @Override
    public String getKey(ImageInfoBean entity) {
        if(entity != null) {
            return entity.getAttachId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ImageInfoBean entity) {
        return entity.getAttachId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
